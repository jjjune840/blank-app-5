# Streamlit 라이브러리를 st라는 이름으로 가져옵니다. 앞으로 st.을 사용하여 Streamlit의 기능을 쓸 수 있습니다.
import streamlit as st

# --- 앱의 기본 설정 ---
# 웹 브라우저 탭에 표시될 제목과 아이콘을 설정합니다.
st.set_page_config(
    page_title="MBTI 학습 유형 진단",
    page_icon="🧠",
)

# --- MBTI 유형별 학습 전략 딕셔너리 ---
# 각 MBTI 유형에 맞는 학습 전략 설명을 미리 저장해 둡니다.
learning_styles = {
    "ISTJ": "현실적이고 체계적이어서, 명확한 목표와 계획을 세워 단계별로 학습하는 것을 선호합니다. 조용하고 정리된 환경에서 집중력이 높습니다.",
    "ISFJ": "다른 사람을 돕는 것에서 보람을 느끼며, 실용적이고 구체적인 정보를 바탕으로 학습합니다. 따뜻하고 지지적인 분위기에서 학습 효과가 좋습니다.",
    "INFJ": "통찰력이 뛰어나고 장기적인 비전을 중요하게 생각합니다. 학습 내용이 자신과 다른 사람에게 어떤 의미가 있는지 파악할 때 동기를 얻습니다.",
    "INTJ": "독창적이고 논리적이어서, 복잡한 이론이나 시스템을 이해하는 것을 즐깁니다. 혼자서 깊이 파고드는 학습을 선호하며, 비효율적인 것을 싫어합니다.",
    "ISTP": "논리적이고 실용적이어서, 직접 손으로 만지고 경험하며 배우는 것을 가장 좋아합니다. 원리를 파악하고 문제를 해결하는 과정에서 재미를 느낍니다.",
    "ISFP": "온화하고 개방적이어서, 조화로운 환경에서 자유롭게 탐색하며 배우는 것을 선호합니다. 미적 감각이 뛰어나며, 실생활과 관련된 내용에 관심이 많습니다.",
    "INFP": "이상주의적이고 창의적이어서, 자신의 가치관과 관련된 내용을 학습할 때 열정을 보입니다. 상상력이 풍부하며, 자유로운 분위기에서 아이디어를 탐구하는 것을 좋아합니다.",
    "INTP": "지적 호기심이 왕성하고 논리적이어서, 복잡한 문제나 추상적인 개념을 탐구하는 것을 즐깁니다. 혼자서 깊이 있게 분석하고 토론하는 것을 선호합니다.",
    "ESTP": "에너지가 넘치고 행동 지향적이어서, 직접 부딪히고 경험하며 배우는 것을 선호합니다. 지루한 이론보다는 실제 활동을 통해 학습 효과가 극대화됩니다.",
    "ESFP": "사교적이고 활동적이어서, 다른 사람들과 함께 어울리며 재미있게 배우는 것을 좋아합니다. 긍정적이고 활기찬 분위기에서 학습 효율이 높습니다.",
    "ENFP": "열정적이고 상상력이 풍부해서, 다양한 가능성을 탐색하고 새로운 아이디어를 만들어내는 것을 즐깁니다. 사람들과 소통하며 함께 성장하는 학습을 선호합니다.",
    "ENTP": "도전적이고 창의적이어서, 기존의 방식에 의문을 제기하고 새로운 해결책을 찾는 것을 즐깁니다. 다른 사람과 논쟁하고 토론하는 과정에서 지식을 얻습니다.",
    "ESTJ": "체계적이고 현실적이어서, 정해진 절차와 규칙에 따라 학습하는 것을 선호합니다. 목표 지향적이며, 학습 내용을 실생활에 적용하는 것을 중요하게 생각합니다.",
    "ESFJ": "사교적이고 책임감이 강해서, 다른 사람들과 협력하고 서로 도우며 학습할 때 동기를 얻습니다. 조화로운 분위기를 중요하게 생각하며, 칭찬과 격려에 긍정적으로 반응합니다.",
    "ENFJ": "다른 사람의 성장을 돕는 것에서 보람을 느끼며, 사람들과의 관계를 통해 배웁니다. 학습 내용이 공동체에 어떤 긍정적인 영향을 미칠 수 있는지 중요하게 생각합니다.",
    "ENTJ": "전략적이고 통솔력이 있어서, 장기적인 목표를 세우고 효율적으로 학습 계획을 관리하는 것을 선호합니다. 도전적인 과제를 해결하며 성취감을 느낍니다."
}

# --- 앱 제목 ---
st.title("🧠 MBTI 학습 유형 진단")
st.write("---") # 구분선

# --- 질문 목록 ---
# 진단에 사용할 질문과 선택지를 리스트 형태로 정리합니다.
questions = [
    {
        "q": "1. 공부할 때 나는...",
        "options": ["조용한 환경에서 혼자 집중하는 게 편하다 (I)", "친구들과 함께 이야기하며 공부하는 게 즐겁다 (E)"],
        "key": "q1"
    },
    {
        "q": "2. 새로운 개념을 배울 때 나는...",
        "options": ["구체적인 예시와 실제 경험을 통해 이해한다 (S)", "전체적인 그림과 숨겨진 의미를 먼저 파악한다 (N)"],
        "key": "q2"
    },
    {
        "q": "3. 과제를 결정할 때 나는...",
        "options": ["논리적인 분석과 객관적인 사실을 중요하게 생각한다 (T)", "주변 사람들과의 관계와 상황을 먼저 고려한다 (F)"],
        "key": "q3"
    },
    {
        "q": "4. 주말 계획을 세울 때 나는...",
        "options": ["미리 계획을 세우고 그대로 실천하는 것을 좋아한다 (J)", "상황에 따라 즉흥적으로 하고 싶은 일을 하는 것을 좋아한다 (P)"],
        "key": "q4"
    },
     {
        "q": "5. 힘든 일이 생겼을 때 나는...",
        "options": ["혼자 조용히 생각하며 정리할 시간이 필요하다 (I)", "다른 사람에게 털어놓으며 에너지를 얻는다 (E)"],
        "key": "q5"
    },
    {
        "q": "6. 나는 스스로를...",
        "options": ["현실적이고 실용적인 사람이라고 생각한다 (S)", "상상력이 풍부하고 이상적인 사람이라고 생각한다 (N)"],
        "key": "q6"
    }
]

# --- 답변 저장 공간 ---
# st.session_state는 사용자의 답변과 같은 데이터를 저장하는 특별한 공간입니다.
# 앱이 새로고침 되어도 데이터가 날아가지 않습니다.
if 'answers' not in st.session_state:
    st.session_state.answers = {}
if 'result' not in st.session_state:
    st.session_state.result = ""


# --- 질문 화면 표시 ---
# st.form을 사용하면, 사용자가 모든 질문에 답하고 '제출' 버튼을 누를 때까지 앱이 기다립니다.
with st.form("mbti_form"):
    st.subheader("👇 아래 질문에 답해주세요.")
    
    # questions 리스트에 있는 각 질문을 화면에 보여줍니다.
    for item in questions:
        question_text = item["q"]
        options_list = item["options"]
        question_key = item["key"]
        
        # st.radio를 사용하여 라디오 버튼 질문을 만듭니다.
        st.session_state.answers[question_key] = st.radio(
            question_text,
            options_list,
            index=None, # 처음에 아무것도 선택되지 않도록 설정
        )
    
    # st.form_submit_button을 누르면 form 안의 모든 데이터가 서버로 전송됩니다.
    submitted = st.form_submit_button("결과 확인하기")


# --- 결과 계산 및 표시 ---
# '결과 확인하기' 버튼이 눌렸을 때 실행될 코드입니다.
if submitted:
    # 모든 질문에 답했는지 확인합니다.
    if None in st.session_state.answers.values():
        st.error("⚠️ 모든 질문에 답변해주세요!")
    else:
        # 각 MBTI 지표(E/I, S/N, T/F, J/P)의 점수를 계산합니다.
        scores = {'E': 0, 'I': 0, 'S': 0, 'N': 0, 'T': 0, 'F': 0, 'J': 0, 'P': 0}
        
        # 사용자의 답변 문자열에서 괄호 안의 알파벳을 찾아 점수를 매깁니다.
        for key, answer in st.session_state.answers.items():
            mbti_char = answer[-2] # 예: "....(E)" -> "E"
            scores[mbti_char] += 1
        
        # 점수를 비교하여 최종 MBTI 유형을 결정합니다.
        mbti_type = ""
        mbti_type += "E" if scores['E'] > scores['I'] else "I"
        mbti_type += "S" if scores['S'] > scores['N'] else "N"
        mbti_type += "T" if scores['T'] > scores['F'] else "F"
        mbti_type += "J" if scores['J'] > scores['P'] else "P"
        
        # 결과를 session_state에 저장합니다.
        st.session_state.result = mbti_type


# 결과가 session_state에 저장되어 있으면 화면에 보여줍니다.
if st.session_state.result:
    st.write("---")
    st.header(f"📈 당신의 학습 유형은 '{st.session_state.result}' 입니다.")
    
    # 딕셔너리에서 결과에 맞는 설명을 찾아 보여줍니다.
    st.write(learning_styles.get(st.session_state.result, "결과를 분석 중입니다."))

    # 다시하기 버튼
    if st.button("다시하기"):
        # 세션 상태를 초기화하여 처음부터 다시 시작할 수 있도록 합니다.
        st.session_state.answers = {}
        st.session_state.result = ""
        st.rerun() # 앱을 새로고침하여 초기 화면을 보여줍니다.